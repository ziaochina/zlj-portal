{"version":3,"file":"zlj-preset-component.js","sources":["webpack://MKApp_zlj_preset_component/webpack/universalModuleDefinition","webpack://MKApp_zlj_preset_component/webpack/bootstrap","webpack://MKApp_zlj_preset_component/templates/internal.js","webpack://MKApp_zlj_preset_component/config.js","webpack://MKApp_zlj_preset_component/external {\"commonjs\":[\"MK\",\"metaEngine\"],\"commonjs2\":\"MK.metaEngine\",\"amd\":\"MK.metaEngine\",\"root\":\"MK.metaEngine\"}","webpack://MKApp_zlj_preset_component/data.js","webpack://MKApp_zlj_preset_component/index.js","webpack://MKApp_zlj_preset_component/templates/index.js","webpack://MKApp_zlj_preset_component/templates/form.js","webpack://MKApp_zlj_preset_component/templates/grid.js","webpack://MKApp_zlj_preset_component/templates/iconButton.js","webpack://MKApp_zlj_preset_component/templates/button.js","webpack://MKApp_zlj_preset_component/templates/sortMenu.js","webpack://MKApp_zlj_preset_component/templates/select.js","webpack://MKApp_zlj_preset_component/templates/search.js","webpack://MKApp_zlj_preset_component/webapi.js","webpack://MKApp_zlj_preset_component/external {\"root\":[\"MK\",\"utils\"],\"commonjs2\":\"MK.utils\",\"amd\":\"MK.utils\",\"commonjs\":\"MK.utils\"}","webpack://MKApp_zlj_preset_component/./style.less","webpack://MKApp_zlj_preset_component/action.js","webpack://MKApp_zlj_preset_component/external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack://MKApp_zlj_preset_component/reducer.js","webpack://MKApp_zlj_preset_component/external {\"root\":\"Immutable\",\"commonjs2\":\"immutable\",\"commonjs\":\"immutable\",\"amd\":\"immutable\"}"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"MK.metaEngine\"), require(\"MK.utils\"), require(\"react\"), require(\"immutable\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"MK.metaEngine\", \"MK.utils\", \"react\", \"immutable\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MKApp_zlj_preset_component\"] = factory(require(\"MK\")[\"metaEngine\"], require(\"MK.utils\"), require(\"react\"), require(\"immutable\"));\n\telse\n\t\troot[\"MKApp_zlj_preset_component\"] = factory(root[\"MK.metaEngine\"], root[\"MK\"][\"utils\"], root[\"React\"], root[\"Immutable\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__2__, __WEBPACK_EXTERNAL_MODULE__16__, __WEBPACK_EXTERNAL_MODULE__20__, __WEBPACK_EXTERNAL_MODULE__22__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","const cache = {}\n\nfunction fixPath (path){\n    if(!path) return path\n\n    var p = path\n    if(cache[p]){\n        return cache[p]\n    }\n\n    var ret = []\n    path.split('.').reduce((a,b)=> { \n        if(a)\n            return ret.push(`${a}.${b}`) && `${a}.${b}`\n        else\n            return ret.push(`${b}`) && `${b}`\n    }, '' )\n    \n    cache[p] = ret.join(' && ')\n    return cache[p]\n}\n\nexport default {\n    fixPath\n}","import webapi from './webapi'\n\nvar _options = {\n\twebapi,\n\twebapiMap: {}\n}\n\nfunction config(options) {\n\tif (options) {\n\t\tObject.assign(_options, options)\n\t}\n}\n\nconfig.current = _options\n\nexport default config","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","export function getMeta() {\n\treturn {\n\t\tname: 'root',\n\t\tcomponent: '::div',\n\t\t_visible: false,\n\t}\n}\n\nexport function getInitState() {\n\treturn {\n\t\tdata: {}\n\t}\n}","const pkgJson = require('./package.json')\n\n__webpack_public_path__ = window[`__pub_${pkgJson.name}__`];\n\nimport { defaultComponent } from 'mk-meta-engine'\nimport { form, readonlyGrid, editableGrid, iconButton, button, sortMenu, select, search } from './templates'\nconst data = require('./data')\nconst config = require('./config')\nrequire('./style.less')\n\nMK && MK.metaEngine.templateFactory.registerTemplates([{\n    name: 'iconButton',\n    templateHandler: iconButton\n}, {\n    name: 'button',\n    templateHandler: button\n}, {\n    name: 'select',\n    templateHandler: select\n}, {\n    name: 'search',\n    templateHandler: search\n}, {\n    name: 'sortMenu',\n    templateHandler: sortMenu\n}, {\n    name: 'readonlyGrid',\n    templateHandler: readonlyGrid\n}, {\n    name: 'form',\n    templateHandler: form\n}, {\n    name: 'editableGrid',\n    templateHandler: editableGrid\n}])\n\nexport default {\n    name: pkgJson.name,\n    version: pkgJson.version,\n    description: pkgJson.description,\n    meta: data.getMeta(),\n    components: [],\n    config: config,\n    load: (cb) => {\n        cb(defaultComponent, require('./action'), require('./reducer'))\n    }\n}","import { form } from './form'\nimport { readonlyGrid, editableGrid } from './grid'\nimport { iconButton } from './iconButton'\nimport { button } from './button'\nimport { sortMenu } from './sortMenu'\nimport { select } from './select'\nimport { search } from './search'\n\n\nexport {\n    form,\n    readonlyGrid,\n    editableGrid,\n    iconButton,\n    button,\n    sortMenu,\n    select,\n    search\n}","import { fixPath } from './internal'\n\nfunction form({ name = 'form', className = 'simple-modal-card-form', items, component, ...ext }) {\n    var ret = {\n        name: 'form',\n        component: 'Form',\n        className: className,\n        children: [],\n        ...ext\n    }\n\n    items.forEach(item => {\n        let x\n        switch (item.type) {\n            case 'treeSelect':\n                x = treeSelectFormItem(item)\n                break;\n            case 'input':\n                x = inputFormItem(item)\n                break;\n            case 'number':\n                x = numberFormItem(item)\n                break;\n            case 'checkbox':\n                x = checkboxFormItem(item)\n                break;\n            case 'datePicker':\n                x = datePickerFormItem(item)\n                break;\n            case 'monthPicker':\n                x = monthPickerFormItem(item)\n                break; \n            case 'select':\n                x = selectFormItem(item)\n                break;\n            case 'multiSelect':\n                x = multiSelectFormItem(item)\n                break;\n            default:\n                x = item\n                break;\n        }\n        ret.children.push(x)\n    })\n    return ret\n}\n\nfunction inputFormItem(option) {\n    var { name, title, required, bindPath, disabled, component, type, _power, _visible, ...ext } = option\n    name = name || bindPath.replace('.','&')\n    return {\n        name: name,\n        component: 'Form.Item',\n        label: title,\n        required: required,\n        children: [{\n            name: name,\n            component: 'Input',\n            value: `{{${fixPath(bindPath)}}}`,\n            onChange: disabled ? undefined : `{{(e)=>$sf('${bindPath}',e.target.value)}}`,\n            disabled,\n            ...ext\n        }],\n        _power,\n        _visible\n    }\n}\n\nfunction numberFormItem(option) {\n    var { name, title, required, bindPath, disabled, component, type, ...ext } = option\n    name = name || bindPath.replace('.','&')\n    return {\n        name: name,\n        component: 'Form.Item',\n        label: title,\n        required: required,\n        children: [{\n            name: name,\n            component: 'Input.Number',\n            value: `{{${fixPath(bindPath)}}}`,\n            onChange: disabled ? undefined : `{{(v)=>$sf('${bindPath}',v)}}`,\n            disabled,\n            ...ext\n        }],\n    }\n}\n\nfunction datePickerFormItem(option) {\n    var { name, title, required, bindPath, disabled, component, format, type, ...ext } = option\n    name = name || bindPath.replace('.','&')\n    format = format  || 'YYYY-MM-DD'\n    return {\n        name: name,\n        component: 'Form.Item',\n        label: title,\n        required: required,\n        children: [{\n            name: name,\n            component: 'DatePicker',\n            value: `{{$stringToMoment(${fixPath(bindPath)})}}`,\n            onChange: disabled ? undefined : `{{(v)=>$sf('${bindPath}', $momentToString(v,'${format}'))}}`,\n            disabled,\n            format,\n            ...ext\n        }]\n    }\n}\n\nfunction monthPickerFormItem(option) {\n    var { name, title, required, bindPath, disabled, component,  type, ...ext } = option\n    name = name || bindPath.replace('.','&')\n    return {\n        name: name,\n        component: 'Form.Item',\n        label: title,\n        required: required,\n        children: [{\n            name: name,\n            component: 'DatePicker.MonthPicker',\n            value: `{{${fixPath(bindPath)}}}`,\n            onChange: disabled ? undefined : `{{(v)=>$sf('${bindPath}',v)}}`,\n            disabled,\n            ...ext\n        }]\n    }\n}\n\nfunction checkboxFormItem(option) {\n    var { name, title, required, bindPath, disabled, component, type, ...ext } = option\n    name = name || bindPath.replace('.','&')\n    return {\n        name: name,\n        component: 'Form.Item',\n        label: title,\n        required: required,\n        children: [{\n            name: name,\n            component: 'Checkbox',\n            checked: `{{${fixPath(bindPath)}}}`,\n            onChange: disabled ? undefined : `{{(e)=>$sf('${bindPath}',e.target.checked)}}`,\n            disabled,\n            ...ext\n        }],\n    }\n}\n\n\nfunction treeSelectFormItem(option) {\n    var {\n        name, title, required, bindPath, disabled = false,\n        dsPath, idField = 'id', codeField = 'code', displayField = 'name',\n        loopTreeSelectChildren = 'loopTreeSelectChildren', onFocus,\n        treeFind = 'treeFind', childrenProp = 'children',\n        component, type, ...ext\n    } = option\n\n    name = name || bindPath.replace('.','&')\n\n    var fixIdField = fixPath(`${bindPath}.${idField}`),\n        fixCodeField = fixPath(`${bindPath}.${codeField}`),\n        fixDisplayField = fixPath(`${bindPath}.${displayField}`)\n\n\n    var ret = {\n        name: name,\n        component: 'Form.Item',\n        label: title,\n        required: required,\n        children: [{\n            name: name,\n            component: 'TreeSelect',\n            treeDefaultExpandAll: true,\n            allowClear:true,\n            //dropdownMatchSelectWidth: false,\n            dropdownStyle: { maxHeight: 400, overflow: 'auto' },\n            onChange: `{{(v)=>{\n                $sf('${bindPath}', $fromJS($${treeFind}(${dsPath},v, '${idField}', '${childrenProp}'), null) || {id:null})\n            }}}`,\n            onFocus: onFocus ? `{{$${onFocus}(data)}}` : undefined,\n            value: `{{{\n                return (${dsPath} && ${fixIdField}) || ( (${fixCodeField}) && ('(' + (${fixCodeField}) + ')' + (${fixDisplayField}) )) || ''\n            }}}`,\n            children: `{{$${loopTreeSelectChildren}(${dsPath}, '${childrenProp}', '${idField}', '${displayField}', '${codeField}')}}`,\n            disabled,\n            ...ext\n        }],\n    }\n    return ret\n}\n\n\n\n\nfunction selectFormItem(option) {\n    var {\n        name, title, required, bindPath, disabled = false,\n        dsPath, idField = 'id', codeField, displayField = 'name',\n        titleField,\n        loopTreeSelectChildren = 'loopTreeSelectChildren', onFocus,\n        treeFind = 'treeFind', childrenProp = 'children',\n        valueIsObj = true, component, type, ...ext\n    } = option\n\n    name = name || bindPath.replace('.','&')\n    titleField = titleField || displayField\n\n    return {\n        name: name,\n        component: 'Form.Item',\n        label: title,\n        required: required,\n        children: [{\n            name: name,\n            component: 'Select',\n            showSearch: true,\n            treeDefaultExpandAll: true,\n            dropdownStyle: { maxHeight: 400, overflow: 'auto' },\n            //dropdownMatchSelectWidth: false,\n            notFoundContent: ' ',\n            allowClear:true,\n            onChange: `{{{\n               return (v)=> {\n                   if(!v){\n                    $sfs({\n                        '${bindPath}': null,\n                        '${bindPath}Id': null\n                     })   \n                     return\n                   }\n\n                   if(${valueIsObj}){\n                       if(!v){$sf('${bindPath}', undefined)}\n                       $sfs({\n                           '${bindPath}': $fromJS(${dsPath}.find(o=>o.${idField}==v), null)\n                        })    \n                   }\n                   else{\n                        $sf('${bindPath}', v || '')    \n                   }\n               }\n            }}}`,\n            onFocus: onFocus ? `{{$${onFocus}(data)}}` : undefined,\n            value: `{{{\n                if(${valueIsObj}){\n                    return (${dsPath} && ${fixPath(`${bindPath}.${idField}`)}) || ( ${fixPath(`${bindPath}.${titleField}`)}) || ''\n                }\n                else{\n                    return ((${fixPath(bindPath)}) && (${fixPath(bindPath)})) || ''\n                }\n            }}}`,\n            optionLabelProp: 'title',\n            optionFilterProp: 'filter',\n            children: {\n                name: 'option',\n                component: 'Select.Option',\n                value: `{{ ${dsPath} && ${dsPath}[_rowIndex].${idField} }}`,\n                title: `{{ ${dsPath} && ${dsPath}[_rowIndex].${titleField} }}`,\n                filter: `{{{\n                    var id =  ${dsPath} && ${dsPath}[_rowIndex].${idField}\n                    var code =  ${dsPath} && ${dsPath}[_rowIndex].${codeField || 'code'}\n                    var display =  ${dsPath} && ${dsPath}[_rowIndex].${displayField}\n                    return code ? (id+code+display) : (id+display)\n                }}}`,\n                children: codeField ? `{{ ${dsPath} && '(' + ${dsPath}[_rowIndex].${codeField} + ')' + ${dsPath}[_rowIndex].${displayField} }}` : `{{ ${dsPath} && ${dsPath}[_rowIndex].${displayField} }}`,\n                _power: `for in ${dsPath}`\n            },\n            disabled,\n            \n            ...ext\n        }],\n\n    }\n}\n\nfunction multiSelectFormItem(option) {\n    var {\n        name, title, required, bindPath, disabled = false,\n        dsPath, idField = 'id', codeField, displayField = 'name',\n        titleField, relaField,\n        loopTreeSelectChildren = 'loopTreeSelectChildren', onFocus,\n        treeFind = 'treeFind', childrenProp = 'children',\n        valueIsObj = true, component, type, ...ext\n    } = option\n\n    name = name || bindPath.replace('.','&')\n    titleField = titleField || displayField\n\n    return {\n        name: name,\n        component: 'Form.Item',\n        label: title,\n        required: required,\n        children: [{\n            name: name,\n            component: 'Select',\n            //showSearch: true,\n            dropdownStyle: { maxHeight: 400, overflow: 'auto' },\n            //dropdownMatchSelectWidth: false,\n            notFoundContent: ' ',\n            allowClear:false,\n            onChange: `{{{\n               return (v)=> {\n                   var sels = []\n                   v.forEach((o)=>{\n                        let hit = ${dsPath}.find(x=>x.${idField}==o)\n                        if(hit){\n                            let hit1 = ${bindPath}.find(x=>x.${relaField}==o)\n                            let relaObjField = '${relaField}'\n                            relaObjField = relaObjField.substr(0,relaObjField.length -2 )\n                            if(hit1){\n                                sels.push({\n                                    ...hit1,\n                                    [relaObjField]:hit\n                                })\n                            }\n                            else{\n                                sels.push({\n                                    [relaObjField]:hit,\n                                    ${relaField}:hit.id\n                                })\n                            }\n                        }\n                   })\n                   $sf('${bindPath}', $fromJS(sels,null))    \n               }\n            }}}`,\n            onFocus: onFocus ? `{{$${onFocus}(data)}}` : undefined,\n            value: `{{{\n                if(!${bindPath}) return\n                let relaObjField = '${relaField}'\n                relaObjField = relaObjField.substr(0,relaObjField.length -2 )\n                if(${dsPath}){\n                    var ret = ${bindPath}.reduce((a,b)=> {a.push(b.${relaField}+''); return a;}, [])\n                    return ret.length > 0 ? ret : []\n                }\n                else{\n                    var ret =  ${bindPath}.reduce((a,b)=>{a.push(b[relaObjField].name); return a;},[])\n                    return ret.length > 0 ? ret : []\n                }\n                \n            }}}`,\n            //optionLabelProp: 'title',\n            optionFilterProp: 'filter',\n            children: {\n                name: 'option',\n                component: 'Select.Option',\n                key: `{{ ${dsPath} && ${dsPath}[_rowIndex].${idField} }}`,\n                //value: `{{ ${dsPath} && ${dsPath}[_rowIndex].${idField} }}`,\n                //title: `{{ ${dsPath} && ${dsPath}[_rowIndex].${titleField} }}`,\n                filter: `{{{\n                    var id =  ${dsPath} && ${dsPath}[_rowIndex].${idField}\n                    var code =  ${dsPath} && ${dsPath}[_rowIndex].${codeField || 'code'}\n                    var display =  ${dsPath} && ${dsPath}[_rowIndex].${displayField}\n                    return code ? (id+code+display) : (id+display)\n                }}}`,\n                children: codeField ? `{{ ${dsPath} && '(' + ${dsPath}[_rowIndex].${codeField} + ')' + ${dsPath}[_rowIndex].${displayField} }}` : `{{ ${dsPath} && ${dsPath}[_rowIndex].${displayField} }}`,\n                _power: `for in ${dsPath}`\n            },\n            disabled,\n            \n            ...ext\n        }],\n\n    }\n}\n\nexport default {\n    form\n}","import { fixPath } from './internal'\n\nfunction readonlyGrid({ name = 'dataGrid', bindPath = 'data.list',\n    paginationPath = 'data.pagination', onPageChange = 'pageChanged',\n    footerClassName = 'f-table-content-footer', columns, \n    component, footerVisible = true, ...ext }) {\n    var ret = [{\n        name: name,\n        component: 'DataGrid',\n        headerHeight: 30,\n        rowHeight: 30,\n        enableSequence: true,\n        startSequence: `{{(${paginationPath}.current-1)*${paginationPath}.pageSize + 1}}`,\n        rowsCount: `{{${bindPath}.length}}`,\n        onColumnResizeEndCallback: `{{$onColumnResizeEndCallback('${name}',data)}}`,\n        columnWidths: `{{data.other && data.other.${name}ColumnWidths}}`,\n        columns: [],\n        ...ext\n    }]\n    if(footerVisible){\n        ret.push({\n            name: 'footer',\n            className: footerClassName,\n            component: 'Layout',\n            children: [{\n                name: 'selectedCount',\n                component: '::h3',\n                children: `{{'选中' + $getSelectedCount('${name}') + '条'}}`\n            }, {\n                name: 'pagination',\n                component: 'Pagination',\n                showSizeChanger: true,\n                pageSize: `{{${paginationPath}.pageSize}}`,\n                current: `{{${paginationPath}.current}}`,\n                total: `{{${paginationPath}.total}}`,\n                onChange: `{{$${onPageChange}}}`,\n                onShowSizeChange: `{{$${onPageChange}}}`\n            }]\n        })\n    }\n\n    columns.forEach(c => {\n        var option = { ...c, grid: name, bindPath }, x\n        switch (c.type) {\n            case 'sel':\n                x = gridSelColumn(option)\n                break;\n            case 'modifyAndDel':\n                x = gridModifyAndDelColumn(option)\n                break;\n            case 'del':\n                x = gridDelColumn(option)\n                break;\n            case 'link':\n                x = gridLinkColumn(option)\n                break;\n            case 'boolText':\n                x = gridBoolTextColumn(option)\n                break;\n            case 'numberText':\n                x = gridNumberTextColumn(option)\n                break;\n            case 'datePickerText':\n                x = gridDatePickerTextColumn(option)\n                break;\n            case 'text':\n                x = gridTextColumn(option)\n                break;\n            default:\n                x = c\n                break;\n        }\n        ret[0].columns.push(x)\n    })\n    return ret\n}\n\nfunction editableGrid({ name = 'grid', bindPath, columns, component, type, ...ext }) {\n    var ret = {\n        name: name,\n        component: 'DataGrid',\n        headerHeight: 30,\n        rowHeight: 30,\n        rowsCount: `{{${bindPath}.length}}`,\n        enableSequence: true,\n        enableAddDelrow: true,\n        startSequence: 1,\n        readonly: false,\n        onAddrow: `{{$addRow('${name}')}}`,\n        onDelrow: `{{$delRow('${name}')}}`,\n        onKeyDown: '{{$gridKeydown}}',\n        scrollToColumn: `{{data.other.${name}ScrollToColumn}}`,\n        scrollToRow: `{{data.other.${name}ScrollToRow}}`,\n        onColumnResizeEndCallback: `{{$onColumnResizeEndCallback('${name}',data)}}`,\n        columnWidths: `{{data.other && data.other.${name}ColumnWidths}}`,\n        columns: [],\n        ...ext\n    }\n\n    columns.forEach(c => {\n        let option = { ...c, grid: name, bindPath }, x\n\n        switch (c.type) {\n            case 'input':\n                x = gridInputColumn(option)\n                break;\n            case 'number':\n                x = gridNumberColumn(option)\n                break;\n            case 'datePicker':\n                x = gridDatePickerColumn(option)\n                break;\n            case 'select':\n                x = gridSelectColumn(option)\n                break;\n            case 'checkbox':\n                x = gridCheckboxColumn(option)\n                break;\n            case 'text':\n                x = gridReadonlyColumn(option)\n                break;\n            default:\n                x = c;\n                break;\n\n        }\n        ret.columns.push(x)\n    })\n    return ret\n}\n\nfunction gridReadonlyColumn(option) {\n    var {\n        name, bindPath, bindField, title, width = 130, flexGrow = 1, required,\n        align = 'left', component, type, fixed, _visible, ...ext\n    } = option\n\n    name = name || bindField.replace('.', '&')\n\n    var ret = {\n        name,\n        component: 'DataGrid.Column',\n        columnKey: name,\n        flexGrow,\n        width,\n        header: {\n            name: 'header',\n            component: 'DataGrid.Cell',\n            children: title\n        },\n        cell: {\n            name: 'cell',\n            component: 'DataGrid.Cell',\n            className: `f-table-cell f-table-cell-${align} f-table-cell-disabled`,\n            children: `{{${fixPath(`${bindPath}[_rowIndex].${bindField}`)}}}`,\n            \n            /*[{\n                name: 'disabled',\n                component: 'Icon',\n                fontFamily: 'awesome',\n                type: 'ban'\n            }, `{{{return ${fixPath(`${bindPath}[_rowIndex].${bindField}`)}}}}`],*/\n            _power: '({rowIndex})=>rowIndex',\n            ...ext\n        },\n        fixed,\n        _visible\n    }\n    return ret\n}\n\nfunction gridSelColumn(option) {\n    var { grid, bindPath, bindField, component, type, ...ext } = option\n\n    return {\n        name: 'sel',\n        component: 'DataGrid.Column',\n        columnKey: 'sel',\n        width: 40,\n        fixed: true,\n        header: {\n            name: 'header',\n            component: 'DataGrid.Cell',\n            children: {\n                name: 'cb',\n                component: 'Checkbox',\n                checked: `{{$isSelectAll('${grid}')}}`,\n                onChange: `{{$selectAll('${grid}')}}`\n            }\n        },\n        cell: {\n            name: 'cell',\n            component: 'DataGrid.Cell',\n            children: {\n                name: 'checkbox',\n                component: 'Checkbox',\n                checked: `{{${bindPath}[_rowIndex].${bindField}}}`,\n                onChange: `{{ (e, option) => $sf('${bindPath}.' + _rowIndex + '.${bindField}', e.target.checked ) }}`,\n            },\n            _power: '({rowIndex})=>rowIndex',\n            ...ext\n        }\n    }\n}\n\nfunction gridModifyAndDelColumn(option){\n    var { bindPath, bindField, onDel, onModify, component, type } = option\n    return {\n        name: 'modifyAndDel',\n        component: 'DataGrid.Column',\n        columnKey: 'modifyAndDel',\n        fixed: true,\n        width: 70,\n        header: {\n            name: 'header',\n            component: 'DataGrid.Cell',\n            children: '操作'\n        },\n        cell: {\n            name: 'cell',\n            component: 'DataGrid.Cell',\n            _power: '({rowIndex})=>rowIndex',\n            children: [{\n                name: 'del',\n                component: 'Icon',\n                showStyle: 'showy',\n                type: 'close',\n                style: {\n                    fontSize: 18\n                },\n                title: '删除',\n                onClick: `{{$${onDel}(${bindPath}[_rowIndex])}}`,\n            },{\n                name: 'modify',\n                component: 'Icon',\n                showStyle: 'softly',\n                type: 'edit',\n                style: {\n                    fontSize: 18\n                },\n                title: '修改',\n                onClick: `{{$${onModify}(${bindPath}[_rowIndex])}}`,\n            }]\n        },\n    }\n}\n\nfunction gridDelColumn(option) {\n    var { bindPath, bindField, onDel, component, type, ...ext } = option\n    return {\n        name: 'del',\n        component: 'DataGrid.Column',\n        columnKey: 'del',\n        fixed: true,\n        width: 40,\n        header: {\n            name: 'header',\n            component: 'DataGrid.Cell',\n            children: '操作'\n        },\n        cell: {\n            name: 'cell',\n            component: 'DataGrid.Cell',\n            _power: '({rowIndex})=>rowIndex',\n            children: [{\n                name: 'del',\n                component: 'Icon',\n                showStyle: 'showy',\n                type: 'close',\n                style: {\n                    fontSize: 18\n                },\n                title: '删除',\n                onClick: `{{$${onDel}(${bindPath}[_rowIndex])}}`,\n                ...ext\n            }]\n        },\n    }\n}\n\nfunction gridLinkColumn(option) {\n    var {\n        bindPath, name, title, width = 130, flexGrow = 1, align = 'left', bindField,\n        idField, onClick, component, type,fixed,_visible, ...ext\n    } = option\n\n    name = name || bindField.replace('.', '&')\n\n    var ret = {\n        name,\n        component: 'DataGrid.Column',\n        columnKey: name,\n        flexGrow,\n        width,\n        header: {\n            name: 'header',\n            component: 'DataGrid.Cell',\n            children: title\n        },\n        cell: {\n            name: 'cell',\n            component: 'DataGrid.Cell',\n            className: `f-table-cell f-table-cell-${align}`,\n            children: {\n                name: 'link',\n                component: '::a',\n                children: `{{${bindPath}[_rowIndex].${bindField}}}`,\n                onClick: `{{$${onClick}(${bindPath}[_rowIndex])}}`\n            },\n            _power: '({rowIndex})=>rowIndex',\n            ...ext\n        },\n        fixed,\n        _visible\n    }\n    return ret\n}\n\nfunction gridTextColumn(option) {\n    var {\n        name, bindPath, bindField, title, width = 130, flexGrow = 1,\n        required, align = 'left', component, type,fixed,_visible, ...ext\n    } = option\n\n    name = name || bindField.replace('.', '&')\n\n    var ret = {\n        name,\n        component: 'DataGrid.Column',\n        columnKey: name,\n        flexGrow: flexGrow,\n        width: width,\n        header: {\n            name: 'header',\n            component: 'DataGrid.Cell',\n            children: title\n        },\n        cell: {\n            name: 'cell',\n            component: 'DataGrid.Cell',\n            className: `f-table-cell f-table-cell-${align}`,\n            _power: '({rowIndex})=>rowIndex',\n            children: `{{${fixPath(`${bindPath}[_rowIndex].${bindField}`)}}}`,\n            ...ext\n        },\n        fixed,\n        _visible\n    }\n    return ret\n}\n\nfunction gridBoolTextColumn(option) {\n    var {\n        name, bindPath, bindField, title, width = 130, flexGrow = 1,\n        required, align = 'center', component, type,fixed,_visible, ...ext\n    } = option\n\n    name = name || bindField.replace('.', '&')\n\n    var ret = {\n        name,\n        component: 'DataGrid.Column',\n        columnKey: name,\n        flexGrow: flexGrow,\n        width: width,\n        header: {\n            name: 'header',\n            component: 'DataGrid.Cell',\n            children: title\n        },\n        cell: {\n            name: 'cell',\n            component: 'DataGrid.Cell',\n            className: `f-table-cell f-table-cell-${align}`,\n            _power: '({rowIndex})=>rowIndex',\n            children: `{{{\n                var o = (${fixPath(`${bindPath}[_rowIndex].${bindField}`)})\n                return (o || o == '1' || o == 'true') ? '是' : '否'\n            }}}`,\n            ...ext\n        },\n        fixed,\n        _visible\n    }\n    return ret\n}\n\nfunction gridNumberTextColumn(option) {\n    var {\n        name, bindPath, bindField, title, width = 130, flexGrow = 1,\n        required, align = 'right', component, type,fixed,_visible, ...ext\n    } = option\n\n    name = name || bindField.replace('.', '&')\n\n    var ret = {\n        name,\n        component: 'DataGrid.Column',\n        columnKey: name,\n        flexGrow: flexGrow,\n        width: width,\n        header: {\n            name: 'header',\n            component: 'DataGrid.Cell',\n            children: title\n        },\n        cell: {\n            name: 'cell',\n            component: 'DataGrid.Cell',\n            className: `f-table-cell f-table-cell-${align}`,\n            _power: '({rowIndex})=>rowIndex',\n            children: `{{${fixPath(`${bindPath}[_rowIndex].${bindField}`)}}}`,\n            ...ext\n        },\n        fixed,\n        _visible\n    }\n    return ret\n}\n\nfunction gridDatePickerTextColumn(option) {\n    var {\n        name, bindPath, bindField, title, width = 130, flexGrow = 1,\n        required, align = 'center', component, type, format,fixed,_visible, ...ext\n    } = option\n\n    name = name || bindField.replace('.', '&')\n    format = format || 'YYYY-MM-DD'\n\n    var ret = {\n        name,\n        component: 'DataGrid.Column',\n        columnKey: name,\n        flexGrow: flexGrow,\n        width: width,\n        header: {\n            name: 'header',\n            component: 'DataGrid.Cell',\n            children: title\n        },\n        cell: {\n            name: 'cell',\n            component: 'DataGrid.Cell',\n            className: `f-table-cell f-table-cell-${align}`,\n            _power: '({rowIndex})=>rowIndex',\n            children: `{{{\n                var o = ${fixPath(`${bindPath}[_rowIndex].${bindField}`)}\n                if(!o) return ''\n                o = $stringToMoment(o)\n                return  $momentToString(o,'${format}')\n            }}}`,\n            ...ext\n        },\n        fixed,\n        _visible\n    }\n    return ret\n}\n\nfunction gridInputColumn(option) {\n    var {\n        grid, name, bindPath, bindField, title, width = 130, flexGrow = 1, required,\n        align = 'left', component, type, onFocus,fixed,_visible, ...ext\n    } = option\n\n    name = name || bindField.replace('.', '&')\n\n    return {\n        name,\n        component: 'DataGrid.Column',\n        columnKey: name,\n        flexGrow: flexGrow,\n        width: width,\n        header: {\n            name: 'header',\n            component: 'DataGrid.Cell',\n            children: [{\n                name: 'label',\n                component: '::label',\n                className: required ? 'ant-form-item-required' : '',\n                children: title\n            }]\n        },\n        cell: {\n            name: 'cell',\n            component: \"{{$isFocus(_ctrlPath) ? 'Input' : 'DataGrid.TextCell'}}\",\n            className: `{{$getCellClassName(_ctrlPath,'${align}')}}`,\n            value: `{{${bindPath}[_rowIndex].${bindField}}}`,\n            onChange: `{{(e)=> $cellChange('${grid}', _rowIndex, '${bindField}', e.target.value)}}`,\n            _power: '({rowIndex})=>rowIndex',\n            ...ext\n        },\n        fixed,\n        _visible\n    }\n}\n\nfunction gridNumberColumn(option) {\n    var {\n        grid, name, bindPath, bindField, title, width = 130, flexGrow = 1, required,\n        align = 'left', component, type,fixed,_visible, ...ext\n    } = option\n\n    name = name || bindField.replace('.', '&')\n\n    return {\n        name,\n        component: 'DataGrid.Column',\n        columnKey: name,\n        flexGrow: flexGrow,\n        width: width,\n        header: {\n            name: 'header',\n            component: 'DataGrid.Cell',\n            children: [{\n                name: 'label',\n                component: '::label',\n                className: required ? 'ant-form-item-required' : '',\n                children: title\n            }]\n        },\n        cell: {\n            name: 'cell',\n            component: \"{{$isFocus(_ctrlPath) ? 'Input.Number' : 'DataGrid.TextCell'}}\",\n            className: `{{$getCellClassName(_ctrlPath,'${align}')}}`,\n            value: `{{${bindPath}[_rowIndex].${bindField}}}`,\n            onChange: `{{(v)=> { \n                $cellChange('${grid}', _rowIndex, '${bindField}', v)\n            }}}`,\n            _power: '({rowIndex})=>rowIndex',\n            ...ext\n        },\n        fixed,\n        _visible\n\n    }\n}\n\nfunction gridCheckboxColumn(option) {\n    var {\n        grid, name, bindPath, bindField, title, width = 130, flexGrow = 1, required,\n        align = 'left', component, type,fixed,_visible, ...ext\n    } = option\n\n    name = name || bindField.replace('.', '&')\n\n    return {\n        name,\n        component: 'DataGrid.Column',\n        columnKey: name,\n        flexGrow,\n        width,\n        header: {\n            name: 'header',\n            component: 'DataGrid.Cell',\n            children: [{\n                name: 'label',\n                component: '::label',\n                className: required ? 'ant-form-item-required' : '',\n                children: title\n            }]\n        },\n        cell: {\n            name: 'cell',\n            component: \"{{$isFocus(_ctrlPath) ? 'Checkbox' : 'DataGrid.TextCell'}}\",\n            className: `{{$getCellClassName(_ctrlPath,'${align}')}}`,\n            checked: `{{${bindPath}[_rowIndex].${bindField}}}`,\n            onChange: `{{(e)=> $cellChange('${grid}', _rowIndex, '${bindField}', e.target.checked)}}`,\n            value: `{{${bindPath}[_rowIndex].${bindField} ? '是': '否'}}`,\n            _power: '({rowIndex})=>rowIndex',\n            ...ext\n        },\n        fixed,\n        _visible\n    }\n}\n\n\nfunction gridDatePickerColumn(option) {\n    var {\n        grid, name, bindPath, bindField, title, width = 130, flexGrow = 1, required,\n        align = 'left', format = 'YYYY-MM-DD', component, type,fixed,_visible, ...ext\n    } = option\n\n    name = name || bindField.replace('.', '&')\n    \n    return {\n        name,\n        component: 'DataGrid.Column',\n        columnKey: name,\n        flexGrow,\n        width,\n        header: {\n            name: 'header',\n            component: 'DataGrid.Cell',\n            children: [{\n                name: 'label',\n                component: '::label',\n                className: required ? 'ant-form-item-required' : '',\n                children: title\n            }]\n        },\n        cell: {\n            name: 'cell',\n            component: \"{{$isFocus(_ctrlPath) ? 'DatePicker' : 'DataGrid.TextCell'}}\",\n            className: `{{$getCellClassName(_ctrlPath,'${align}')}}`,\n            value: `{{{\n                return $isFocus(_ctrlPath)\n                    ? $stringToMoment(${bindPath}[_rowIndex].${bindField})\n                    : ${bindPath}[_rowIndex].${bindField} && $stringToMoment(${bindPath}[_rowIndex].${bindField}).format('${format}')\n            }}}`,\n            onChange: `{{(v)=> $cellChange('${grid}',_rowIndex, '${bindField}',  $momentToString(v,'${format}'))}}`,\n            _power: '({rowIndex})=>rowIndex',\n            format,\n            ...ext\n        },\n        fixed,\n        _visible\n    }\n}\n\n\nfunction gridSelectColumn(option) {\n    var {\n        grid, name, bindPath, bindField, title, width = 130, flexGrow = 1, required,\n        align = 'left', dsPath, valueIsObj = true, idField = 'id', codeField,\n        displayField = 'name', titleField, onFocus, component, type,fixed,_visible, ...ext\n    } = option\n\n    name = name || bindField.replace('.', '&')\n    titleField = titleField || displayField\n\n    return {\n        name,\n        component: 'DataGrid.Column',\n        columnKey: name,\n        flexGrow,\n        width,\n        header: {\n            name: 'header',\n            component: 'DataGrid.Cell',\n            children: [{\n                name: 'label',\n                component: '::label',\n                className: required ? 'ant-form-item-required' : '',\n                children: title\n            }]\n        },\n        cell: {\n            name: 'cell',\n            component: \"{{$isFocus(_ctrlPath) ? 'Select' : 'DataGrid.TextCell'}}\",\n            className: `{{$getCellClassName(_ctrlPath,'${align}')}}`,\n            optionLabelProp: 'title',\n            optionFilterProp: 'filter',\n            //dropdownMatchSelectWidth: false,\n            notFoundContent: ' ',\n            allowClear:true,\n            value: `{{{\n                if( $isFocus(_ctrlPath) ){\n                    if(${valueIsObj}){\n                        return ( ${dsPath} && ${fixPath(`${bindPath}[_rowIndex].${bindField}.${idField}`)})\n                            || (${fixPath(`${bindPath}[_rowIndex].${bindField}.${titleField}`)}) \n                            || ''\n                    }\n                    else{\n                        return  ${fixPath(`${bindPath}[_rowIndex].${bindField}`)}\n                    }\n                }\n                else{\n                    if(${valueIsObj}){\n                        return ( ${fixPath(`${bindPath}[_rowIndex].${bindField}.${titleField}`)}) || ''\n                    }\n                    else{\n                        var v =  ${fixPath(`${bindPath}[_rowIndex].${bindField}`)}\n                        v = ${dsPath} && v && ${dsPath}.find(o=>o.${idField}==v)\n                        return  v && v.${titleField}\n                    }\n                }\n            }}}`,\n            children: {\n                name: 'option',\n                component: 'Select.Option',\n                value: `{{${dsPath}[_lastIndex].${idField}}}`,\n                title: `{{ ${dsPath} && ${dsPath}[_lastIndex].${titleField} }}`,\n                filter: `{{{\n                    var id =  ${dsPath} && ${dsPath}[_lastIndex].${idField}\n                    var code =  ${dsPath} && ${dsPath}[_lastIndex].${codeField || 'code'}\n                    var display =  ${dsPath} && ${dsPath}[_lastIndex].${displayField}\n                    return code ? (id+code+display) : (id+display)\n                }}}`,\n                children: codeField ? `{{ ${dsPath} && '(' + ${dsPath}[_lastIndex].${codeField} + ')' + ${dsPath}[_lastIndex].${displayField} }}` : `{{ ${dsPath} && ${dsPath}[_lastIndex].${displayField} }}`,\n                _power: `for in ${dsPath}`\n            },\n            onChange: `{{(v)=>{\n                var r = v || ''\n                if(${valueIsObj}){\n                    const obj = ${dsPath}.find(o=>o.${idField}==v)\n                    r =  $fromJS(obj,undefined)\n                }\n                $cellChange('${grid}', _rowIndex, '${bindField}', r )\n            }}}`,\n            onFocus: onFocus ? `{{$${onFocus}(data,_rowIndex)}}` : undefined,\n            _excludeProps: \"{{$isFocus(_ctrlPath)? ['onClick'] : ['children', 'optionLabelProp', 'onFocus'] }}\",\n            _power: '({rowIndex})=>rowIndex',\n            ...ext\n        },\n        fixed,\n        _visible\n    }\n}\n\nexport default {\n    readonlyGrid,\n    editableGrid\n}","function iconButton({ icon = 'plus', title, onClick,\n    fontFamily = 'awesome', type = 'softly', key = title, component, ...ext }) {\n\n    return {\n        name: key,\n        component: 'Button',\n        className: 'common-icon-button',\n        type: type,\n        //iconFontFamily: fontFamily,\n        title: title,\n        icon: icon,\n        onClick: onClick ? `{{$${onClick}(data)}}` : undefined,\n        ...ext\n    }\n}\n\nexport default {\n    iconButton\n}","function button({ title, onClick, type = 'bluesky', key = title, component, ...ext }) {\n    return {\n        name: key,\n        component: 'Button',\n        type: type,\n        children: title,\n        onClick: onClick ? `{{$${onClick}(data)}}` : undefined,\n        ...ext\n    }\n}\n\nexport default {\n    button\n}","function sortMenu({ bindPath, selectedClassName, onClick, options = [], component, ...ext}) {\n    var ret = {\n        name: 'sort',\n        component: 'Dropdown',\n        overlay: {\n            name: 'menu',\n            component: 'Menu',\n            onClick: onClick ? `{{$${onClick}}}` : undefined,\n            children: []\n        },\n        children: {\n            name: 'sort',\n            component: 'Button',\n            className: 'common-icon-button',\n            type: 'softly',\n            iconFontFamily: 'awesome',\n            icon: 'sort-amount-desc',\n        }\n    }\n\n    options.forEach(o => {\n        ret.overlay.children.push({\n            name: o.key,\n            component: 'Menu.Item',\n            key: o.key,\n            className: `{{${bindPath || 'data.filter.orderBy'} == '${o.key}' ? '${selectedClassName || 'sort-selected'}':'' }}`,\n            children: [o.title, {\n                name: 'checked',\n                component: 'Icon',\n                type: 'check',\n                _visible: `{{${bindPath || 'data.filter.orderBy'} == '${o.key}'}}`\n            }],\n        })\n    })\n    return ret\n}\n\nexport default {\n    sortMenu\n}","import { fixPath } from './internal'\n\nfunction select({ name, bindPath, dsPath, valueIsObj, idField = 'id', codeField, displayField = 'name', onFocus,component, ...ext }) {\n    var name = name || bindPath.replace('.','&')\n    return {\n        name: name,\n        component: 'Select',\n        showSearch: true,\n        dropdownStyle: { maxHeight: 400, overflow: 'auto' },\n       // dropdownMatchSelectWidth: false,\n        notFoundContent: ' ',\n        allowClear: true,\n        onChange: `{{{\n           return (v)=> {\n               if(!v){\n                $sfs({\n                    '${bindPath}': undefined\n                 })   \n                 return\n               }\n\n               if(${valueIsObj}){\n                   if(!v){$sf('${bindPath}', undefined)}\n                   $sfs({\n                       '${bindPath}': $fromJS(${dsPath}.find(o=>o.${idField}==v), null)\n                    })    \n               }\n               else{\n                    $sf('${bindPath}', v || '')    \n               }\n           }\n        }}}`,\n        onFocus: onFocus ? `{{$${onFocus}(data)}}` : undefined,\n        value: `{{{\n            if(${valueIsObj}){\n                return (${dsPath} && ${fixPath(`${bindPath}.${idField}`)}) || ( ${fixPath(`${bindPath}.${displayField}`)}) || undefined\n            }\n            else{\n                return ((${fixPath(bindPath)}) && (${fixPath(bindPath)})) || undefined\n            }\n        }}}`,\n        optionLabelProp: 'title',\n        optionFilterProp: 'filter',\n        children: {\n            name: 'option',\n            component: 'Select.Option',\n            value: `{{ ${dsPath} && ${dsPath}[_rowIndex].${idField} }}`,\n            title: `{{ ${dsPath} && ${dsPath}[_rowIndex].${displayField} }}`,\n            filter: `{{{\n                var id =  ${dsPath} && ${dsPath}[_rowIndex].${idField}\n                var code =  ${dsPath} && ${dsPath}[_rowIndex].${codeField}\n                var display =  ${dsPath} && ${dsPath}[_rowIndex].${displayField}\n                return code ? (id+code+display) : (id+display)\n            }}}`,\n            children: codeField ? `{{ ${dsPath} && '(' + ${dsPath}[_rowIndex].${codeField} + ')' + ${dsPath}[_rowIndex].${displayField} }}` : `{{ ${dsPath} && ${dsPath}[_rowIndex].${displayField} }}`,\n            _power: `for in ${dsPath}`\n        },\n        ...ext\n    }\n}\n\nexport default {\n    select\n}","import { fixPath } from './internal'\n\nfunction search({ name, bindPath, dsPath, valueIsObj, idField = 'id', codeField, displayField = 'name', onFocus,component, ...ext }) {\n    var name = name || bindPath.replace('.','&')\n    return {\n        name,\n        component: 'Input.Search',\n        value: `{{${bindPath}}}`,\n        onChange: `{{ (e)=>{$sf('${bindPath}', e.target.value);$searchChange(e.target.value)}}}`,\n        ...ext\n    }\n}\n\nexport default {\n    search\n}","import { fetch } from 'mk-utils'\nimport config from './config'\nconst api = key => config.current.webapiMap[key]\n\nexport default {\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__16__;","// extracted by mini-css-extract-plugin","import React from 'react'\nimport { action as MetaAction, AppLoader } from 'mk-meta-engine'\nimport config from './config'\n\nclass action {\n    constructor(option) {\n        this.metaAction = option.metaAction\n        this.config = config.current\n    }\n\n    onInit = ({ component, injections }) => {\n        this.component = component\n        this.injections = injections\n        //injections.reduce('init')\n    }\n}\n\nexport default function creator(option) {\n    const metaAction = new MetaAction(option),\n        o = new action({ ...option, metaAction }),\n        ret = { ...metaAction, ...o }\n\n    metaAction.config({ metaHandlers: ret })\n\n    return ret\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","import { Map } from 'immutable'\nimport { reducer as MetaReducer } from 'mk-meta-engine'\nimport config from './config'\nimport { getInitState } from './data'\n\nclass reducer {\n    constructor(option) {\n        this.metaReducer = option.metaReducer\n        this.config = config.current\n    }\n\n    init = (state, option) => {\n        return this.metaReducer.init(state, getInitState())\n    }\n}\n\nexport default function creator(option) {\n    const metaReducer = new MetaReducer(option),\n        o = new reducer({ ...option, metaReducer })\n\n    return { ...metaReducer, ...o }\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClFA;;;;;;;ACAA;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;;;;;;ACIA;;;;;;;ACJA;;;;;;;ACAA;AA8KA;AA4CA;AA8EA;AAEA;AA4CA;AAMA;AACA;;;;;;;AC7VA;;;;;AAkKA;AA6eA;;;;;;;AC/oBA;AASA;;;;;;;ACTA;;;;;;;ACAA;;;;;;;ACAA;AAUA;;;;;;;ACVA;;;;;;;;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;;;ACiBA;AAHA;;;;;;ACdA;;;;;;;ACgBA;;;;;;AChBA;;;;A","sourceRoot":""}